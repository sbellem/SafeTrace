use ethereum_types::{H160, U256};
use rlp::RlpStream;
use tiny_keccak::keccak256;

/// Description of a Transaction, pending or in the chain.
#[derive(Debug, Default, Clone, PartialEq, Deserialize, Serialize)]
pub struct RawTransaction {
    /// Nonce
    pub nonce: U256,
    /// Recipient (None when contract creation)
    pub to: Option<H160>,
    /// Transfered value
    pub value: U256,
    /// Gas Price
    #[serde(rename = "gasPrice")]
    pub gas_price: U256,
    /// Gas amount
    pub gas: U256,
    /// Input data
    pub data: Vec<u8>,
}

impl RawTransaction {
    /// Signs and returns the RLP-encoded transaction - used to manually inject signature
    pub fn raw_sign(&self, r: Vec<u8>, s: Vec<u8>, v: u64) -> Vec<u8> {
        let mut r_n = r;
        let mut s_n = s;
        while r_n[0] == 0 {
            r_n.remove(0);
        }
        while s_n[0] == 0 {
            s_n.remove(0);
        }
        let mut tx = RlpStream::new();
        tx.begin_unbounded_list();
        self.encode(&mut tx);
        tx.append(&mut v.clone());
        tx.append(&r_n);
        tx.append(&s_n);
        tx.finalize_unbounded_list();
        tx.out()
    }

    /// Returns the value that we need to sign, for usage for external signature
    pub fn to_hash(&self, chain_id: &u64) -> Vec<u8> {
        self.hash(*chain_id)
    }

    fn hash(&self, chain_id: u64) -> Vec<u8> {
        let mut hash = RlpStream::new();
        hash.begin_unbounded_list();
        self.encode(&mut hash);
        hash.append(&mut chain_id.clone());
        hash.append(&mut U256::zero());
        hash.append(&mut U256::zero());
        hash.finalize_unbounded_list();
        keccak256_hash(&hash.out())
    }

    fn encode(&self, s: &mut RlpStream) {
        s.append(&self.nonce);
        s.append(&self.gas_price);
        s.append(&self.gas);
        if let Some(ref t) = self.to {
            s.append(t);
        } else {
            s.append(&vec![]);
        }
        s.append(&self.value);
        s.append(&self.data);
    }
}

fn keccak256_hash(bytes: &[u8]) -> Vec<u8> {
    keccak256(bytes).iter().cloned().collect()
}

mod test {
    #[test]
    fn test_signs_transaction_eth() {
        use ethereum_types::*;
        use super::RawTransaction;
        use hex::{ToHex, FromHex};
        let nonce = U256::zero();

        let to:H160 = H160([0x9b, 0x1f, 0x7f, 0x64, 0x53, 0x51, 0xaf, 0x36, 0x31, 0xa6, 0x56, 0x42, 0x1e, 0xd2, 0xe4, 0x0f, 0x28, 0x02, 0xe6, 0xc0]);
        assert_eq!(format!("{:?}", to), "0x9b1f7f645351af3631a656421ed2e40f2802e6c0");
        let value = U256::zero();
        let gas_price = U256::zero();
        let gas = U256::from(U128([5999999, 0u64]));
        let data: Vec<u8> = vec![120, 108, 212, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 118, 84, 198, 14, 178, 2, 6, 144, 131, 22, 159, 158, 80, 148, 250, 98, 168, 202, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 208, 65, 103, 65, 65, 65, 65, 115, 65, 65, 65, 68, 118, 65, 79, 56, 65, 55, 43, 47, 118, 55, 55, 65, 122, 88, 57, 79, 56, 72, 77, 113, 80, 103, 69, 54, 53, 105, 109, 81, 103, 87, 83, 50, 101, 73, 116, 108, 118, 111, 87, 54, 78, 88, 98, 71, 88, 82, 105, 74, 109, 108, 118, 67, 90, 83, 67, 68, 122, 78, 50, 114, 109, 115, 118, 73, 68, 84, 84, 116, 54, 83, 48, 105, 110, 101, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 119, 65, 65, 65, 65, 65, 65, 65, 65, 65, 72, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68, 116, 100, 104, 115, 66, 85, 53, 57, 117, 67, 103, 108, 107, 74, 79, 72, 51, 99, 112, 80, 86, 87, 81, 84, 47, 80, 78, 67, 97, 103, 65, 56, 78, 49, 72, 90, 101, 54, 110, 66, 116, 51, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 68, 49, 120, 110, 110, 102, 101, 114, 75, 70, 72, 68, 50, 117, 118, 89, 113, 84, 88, 100, 68, 65, 56, 105, 90, 50, 50, 107, 67, 68, 53, 120, 119, 55, 104, 51, 56, 67, 77, 102, 79, 110, 103, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68, 65, 100, 108, 84, 71, 68, 114, 73, 67, 66, 112, 67, 68, 70, 112, 43, 101, 85, 74, 84, 54, 89, 113, 106, 75, 113, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 113, 65, 73, 65, 65, 79, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 118, 117, 115, 85, 51, 121, 101, 65, 107, 57, 69, 80, 83, 84, 54, 110, 71, 103, 66, 65, 65, 68, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 54, 86, 43, 103, 84, 104, 71, 65, 108, 83, 73, 67, 113, 106, 113, 76, 65, 78, 51, 87, 84, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        let chain_id: u64 = 4447;

        let tx = RawTransaction {
            nonce,
            to: Some(to),
            value,
            gas_price,
            gas,
            data,
        };
        let expected_hash = "740311cc9865cf40569666e1304fb775538f43f5e64ce78aae981fbf7a965c09";
        let expected_signed: Vec<u8> = vec![249, 6, 232, 128, 128, 131, 91, 141, 127, 148, 155, 31, 127, 100, 83, 81, 175, 54, 49, 166, 86, 66, 30, 210, 228, 15, 40, 2, 230, 192, 128, 185, 6, 132, 120, 108, 212, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 118, 84, 198, 14, 178, 2, 6, 144, 131, 22, 159, 158, 80, 148, 250, 98, 168, 202, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 208, 65, 103, 65, 65, 65, 65, 115, 65, 65, 65, 68, 118, 65, 79, 56, 65, 55, 43, 47, 118, 55, 55, 65, 122, 88, 57, 79, 56, 72, 77, 113, 80, 103, 69, 54, 53, 105, 109, 81, 103, 87, 83, 50, 101, 73, 116, 108, 118, 111, 87, 54, 78, 88, 98, 71, 88, 82, 105, 74, 109, 108, 118, 67, 90, 83, 67, 68, 122, 78, 50, 114, 109, 115, 118, 73, 68, 84, 84, 116, 54, 83, 48, 105, 110, 101, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 119, 65, 65, 65, 65, 65, 65, 65, 65, 65, 72, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68, 116, 100, 104, 115, 66, 85, 53, 57, 117, 67, 103, 108, 107, 74, 79, 72, 51, 99, 112, 80, 86, 87, 81, 84, 47, 80, 78, 67, 97, 103, 65, 56, 78, 49, 72, 90, 101, 54, 110, 66, 116, 51, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 68, 49, 120, 110, 110, 102, 101, 114, 75, 70, 72, 68, 50, 117, 118, 89, 113, 84, 88, 100, 68, 65, 56, 105, 90, 50, 50, 107, 67, 68, 53, 120, 119, 55, 104, 51, 56, 67, 77, 102, 79, 110, 103, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68, 65, 100, 108, 84, 71, 68, 114, 73, 67, 66, 112, 67, 68, 70, 112, 43, 101, 85, 74, 84, 54, 89, 113, 106, 75, 113, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 113, 65, 73, 65, 65, 79, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 118, 117, 115, 85, 51, 121, 101, 65, 107, 57, 69, 80, 83, 84, 54, 110, 71, 103, 66, 65, 65, 68, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 55, 117, 54, 86, 43, 103, 84, 104, 71, 65, 108, 83, 73, 67, 113, 106, 113, 76, 65, 78, 51, 87, 84, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 34, 225, 160, 134, 8, 157, 59, 90, 250, 16, 179, 84, 48, 49, 97, 92, 221, 11, 22, 77, 8, 64, 154, 230, 71, 110, 56, 183, 189, 230, 239, 37, 161, 238, 96, 160, 3, 3, 36, 4, 81, 252, 170, 203, 172, 87, 109, 59, 75, 2, 155, 19, 159, 139, 146, 76, 143, 166, 86, 137, 188, 32, 252, 39, 168, 15, 125, 227];
        let tx_hash = tx.to_hash(&chain_id).to_hex();

        assert_eq!(tx_hash, expected_hash);

        let r = "86089d3b5afa10b3543031615cdd0b164d08409ae6476e38b7bde6ef25a1ee60".from_hex().unwrap();
        let s = "0303240451fcaacbac576d3b4b029b139f8b924c8fa65689bc20fc27a80f7de3".from_hex().unwrap();
        let v = 27;

        let _v = chain_id * 2 + v as u64 + 35 - 27;

        assert_eq!(tx.raw_sign(r, s, _v), expected_signed);

    }
}
