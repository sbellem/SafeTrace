######## Portable Settings############

# The path to baidu code. Uses environment variable HOME. In Enigma docker HOME=/root, therefore sgx is cloned to /root.
# When working outside the docker, sgx directory should be cloned to HOME or SGX_SDK_RUST should be overridden.
SGX_SDK_RUST ?= $(HOME)/sgx

######## SGX SDK Settings ########

# The directory where intel sgx is installed
SGX_SDK ?= /opt/sgxsdk

# SGX mode:
#   HW - hardware mode
#   SW - simulation mode
# for enabling the simulation mode, override this variable
SGX_MODE ?= HW

# Architecture. Attention! 32bit architecture was not tested yet.
SGX_ARCH ?= x64

ifeq ($(shell getconf LONG_BIT), 32)
	SGX_ARCH := x86
else ifeq ($(findstring -m32, $(CXXFLAGS)), -m32)
	SGX_ARCH := x86
endif

ifeq ($(SGX_ARCH), x86)
	SGX_COMMON_CFLAGS := -m32
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r
else
	SGX_COMMON_CFLAGS := -m64
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib64
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r
endif

# In SGX_PRERELEASE mode the enclave is built in release mode, but launched in debug mode.
# In SGX_PRERELEASE mode the signing key does not need to be white-listed.
ifeq ($(DEBUG), 1)
ifeq ($(SGX_PRERELEASE), 1)
$(error Cannot set DEBUG and SGX_PRERELEASE at the same time!!)
endif
endif

# Debug vs release or prerelease mode
ifeq ($(DEBUG), 1)
	SGX_COMMON_CFLAGS += -O0 -g
	Rust_target_dir := debug
else
	SGX_COMMON_CFLAGS += -O2
	App_Rust_Flags := --release
	Rust_target_dir := release
endif

######## CUSTOM Settings ########

# Path of all libraries that are linked into enclave DLL
CUSTOM_LIBRARY_PATH := ./lib

# Path to untrusted Rust binary and signed enclave DLL
CUSTOM_BIN_PATH := ./bin

# Path to baidu EDL .h files
CUSTOM_EDL_PATH := $(SGX_SDK_RUST)/edl

# Path to C language header files
CUSTOM_COMMON_PATH := $(SGX_SDK_RUST)/common

######## EDL Settings ########

# Files generated by the Intel edgerator
Enclave_EDL_Files := enclave/Enclave_t.c enclave/Enclave_t.h app/Enclave_u.c app/Enclave_u.h

######## APP Settings ########

App_Rust_Flags += $(if $(JOBS),-j$(JOBS), )

App_SRC_Files := $(shell find app/ -type f -name '*.rs') $(shell find app/ -type f -name 'Cargo.toml')

# Include paths for untrusted EDL object
App_Include_Paths := -I ./app -I./include -I$(SGX_SDK)/include -I$(CUSTOM_EDL_PATH) -I./enclave

# C compilation flags for untrusted EDL object
App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)

App_Rust_Path := ./app/target/$(Rust_target_dir)
App_Enclave_u_Object :=app/libEnclave_u.a
App_Name := enigma-core-app

######## Enclave Settings ########

# Intel SDK trusted libraries
ifneq ($(SGX_MODE), HW)
	Trts_Library_Name := sgx_trts_sim
	Service_Library_Name := sgx_tservice_sim
else
	Trts_Library_Name := sgx_trts
	Service_Library_Name := sgx_tservice
endif
Crypto_Library_Name := sgx_tcrypto
KeyExchange_Library_Name := sgx_tkey_exchange
ProtectedFs_Library_Name := sgx_tprotected_fs

RustEnclave_Include_Paths := -I $(CUSTOM_EDL_PATH) -I$(CUSTOM_COMMON_PATH)/inc -I$(CUSTOM_COMMON_PATH) -I$(SGX_SDK)/include -I$(SGX_SDK)/include/tlibc -I$(SGX_SDK)/include/stlport -I$(SGX_SDK)/include/epid -I ./enclave -I./include

RustEnclave_Link_Libs := -L$(CUSTOM_LIBRARY_PATH) -lcompiler-rt-patch -lenclave
RustEnclave_Compile_Flags := $(SGX_COMMON_CFLAGS) -nostdinc -fvisibility=hidden -fpie -fstack-protector $(RustEnclave_Include_Paths)
RustEnclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \
	-Wl,--whole-archive -l$(Trts_Library_Name) -l$(Service_Library_Name) -Wl,--no-whole-archive \
	-Wl,--start-group -lsgx_tstdc -lsgx_tcxx -l$(Crypto_Library_Name) $(RustEnclave_Link_Libs) -Wl,--end-group \
	-Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
	-Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
	-Wl,--defsym,__ImageBase=0 \
	-Wl,--gc-sections \
	-Wl,--version-script=enclave/Enclave.lds

RustEnclave_Name := enclave/enclave.so
Signed_RustEnclave_Name := $(CUSTOM_BIN_PATH)/enclave.signed.so

.PHONY: all
all: $(Signed_RustEnclave_Name)

######## C source files generated from EDL ########

$(Enclave_EDL_Files): $(SGX_EDGER8R) enclave/Enclave.edl
	$(SGX_EDGER8R) --trusted enclave/Enclave.edl --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH) --trusted-dir enclave
	$(SGX_EDGER8R) --untrusted enclave/Enclave.edl --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH) --untrusted-dir app
	@echo "GEN  =>  $(Enclave_EDL_Files)"

######## App Objects ########

# Untrusted EDL object
app/Enclave_u.o: $(Enclave_EDL_Files)
	@$(CC) $(App_C_Flags) -c app/Enclave_u.c -o $@
	@echo "CC   <=  $<"

# Untrusted EDL static library
$(App_Enclave_u_Object): app/Enclave_u.o
	$(AR) rcsD $@ $^
	cp $(App_Enclave_u_Object) $(CUSTOM_LIBRARY_PATH)

# Untrusted Rust binary. Cargo gets parameters through app/build.rs.
# The binary is copied to $(CUSTOM_BIN_PATH)
$(App_Name): $(App_Enclave_u_Object) $(App_SRC_Files)
	@cd app && cargo build -p enigma-types $(App_Rust_Flags)
	@cd app && SGX_SDK_RUST=$(SGX_SDK_RUST) SGX_SDK=$(SGX_SDK) cargo build $(App_Rust_Flags)
	@echo "Cargo  =>  $@"
	mkdir -p $(CUSTOM_BIN_PATH)
	cp $(App_Rust_Path)/$(App_Name) $(CUSTOM_BIN_PATH)/$(App_Name)

######## Enclave Objects ########

# Trusted EDL object
enclave/Enclave_t.o: $(Enclave_EDL_Files)
	@$(CC) $(RustEnclave_Compile_Flags) -c enclave/Enclave_t.c -o $@
	@echo "CC   <=  $<"

# Enclave DLL
$(RustEnclave_Name): enclave compiler-rt $(App_Name) enclave/Enclave_t.o
	mkdir -p $(CUSTOM_LIBRARY_PATH)
	cp $(SGX_SDK_RUST)/compiler-rt/libcompiler-rt-patch.a $(CUSTOM_LIBRARY_PATH)
	@$(CXX) enclave/Enclave_t.o -o $@ $(RustEnclave_Link_Flags)
	@echo "LINK =>  $@"

# Signing of the enclave DLL with Intel signing tool. The signed DLL will be loaded on creation of enclave.
# Signing in the Makefile publicly is possible only in debug or prerelease modes.
$(Signed_RustEnclave_Name): $(RustEnclave_Name)
	@$(SGX_ENCLAVE_SIGNER) sign -key enclave/Enclave_private.pem -enclave $(RustEnclave_Name) -out $@ -config enclave/Enclave.config.xml
	@echo "SIGN =>  $@"

.PHONY: enclave
# Invocation of Makefile in ./enclave, which builds trusted Rust static library and copies it to $(CUSTOM_LIBRARY_PATH)
enclave: $(Enclave_EDL_Files)
	mkdir -p $(CUSTOM_LIBRARY_PATH)
	$(MAKE) -C ./enclave/ CARGO_FLAGS=$(App_Rust_Flags) Rust_target_dir=$(Rust_target_dir)

.PHONY: compiler-rt
# Building of libcompiler-rt-patch.a library, which contains various builtin functions for a variety of architectures
compiler-rt:
	$(MAKE) -C $(SGX_SDK_RUST)/compiler-rt/ 2> /dev/null

.PHONY: test
test: all
	@cd app && cargo test $(App_Rust_Flags)

.PHONY: clean
# Clean untrusted and trusted libraries and binaries, edgerator generation results
clean:
	@rm -f $(CUSTOM_BIN_PATH)/$(App_Name) $(RustEnclave_Name) $(Signed_RustEnclave_Name) enclave/*_t.* app/*_u.* $(CUSTOM_LIBRARY_PATH)/*.a

.PHONY: full-clean
# Clean:
#	untrusted and trusted libraries and binaries
#	edgerator generation results
#	files generated by rust build scripts
#	rust target directories
#	Cargo.lock files
full-clean:
	@rm -f $(CUSTOM_BIN_PATH)/$(App_Name) $(RustEnclave_Name) $(Signed_RustEnclave_Name) enclave/*_t.* app/*_u.* $(CUSTOM_LIBRARY_PATH)/*.a
	@rm -rf enclave/enigma-types.h app/enigma-types.h
	@cd enclave && cargo clean && rm -f Cargo.lock
	@cd app && cargo clean && rm -f Cargo.lock
